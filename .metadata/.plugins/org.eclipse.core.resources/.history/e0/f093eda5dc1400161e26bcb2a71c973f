import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

public class Foothill
{
   static int NUM_CARDS_PER_HAND = 7;
   static int  NUM_PLAYERS = 2;
   static JLabel[] computerLabels = new JLabel[NUM_CARDS_PER_HAND];
   static JLabel[] humanLabels = new JLabel[NUM_CARDS_PER_HAND];  
   static JLabel[] playedCardLabels  = new JLabel[NUM_PLAYERS]; 
   static JLabel[] playLabelText  = new JLabel[NUM_PLAYERS]; 

   public static void main(String[] args)
   {
      int k;
      Icon tempIcon;

      // establish main frame in which program will run
      CardTable myCardTable = new CardTable("Card Room", NUM_CARDS_PER_HAND, NUM_PLAYERS);
      myCardTable.setSize(800, 600);
      myCardTable.setLocationRelativeTo(null);
      myCardTable.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

      // show everything to the user
      myCardTable.setVisible(true);

      // CREATE LABELS ----------------------------------------------------
      for (k=0; k<NUM_CARDS_PER_HAND; k++){ 
         humanLabels[k] = new JLabel(generateRandomCard());
         computerLabels[k] = new JLabel(GUICard.getCardBackIcon()); 
      }
      for (k=0; k<NUM_PLAYERS; k++)
      {
         playedCardLabels[k] = new JLabel(generateRandomCard(), JLabel.CENTER);  
      }
      playLabelText[0] = new JLabel("Computer", JLabel.CENTER);
      playLabelText[1] = new JLabel("You", JLabel.CENTER);
      
      // ADD LABELS TO PANELS -----------------------------------------
      for (k=0; k<NUM_CARDS_PER_HAND; k++){ 
         myCardTable.computerHand.add(computerLabels[k]);
         myCardTable.yourHand.add(humanLabels[k]);
      }
      for (k=0; k<NUM_PLAYERS; k++)
      {
         myCardTable.playingArea.add(playedCardLabels[k]);
      }
      for (k=0; k<NUM_PLAYERS; k++)
      {
         myCardTable.playingArea.add(playLabelText[k]);
      }
      
      // and two random cards in the play region (simulating a computer/hum ply)
      
      // show everything to the user
      myCardTable.setVisible(true);
   }

   public static Icon generateRandomCard()
   {
      int value = (int) Math.floor(Math.random() * 13);
      int suit = (int) Math.floor(Math.random() * 3);
      System.out.println(value + " " + suit);
      Card card = new Card( GUICard.turnIntIntoCardValueChar(value), 
            GUICard.turnIntIntoSuit(suit) );
      System.out.println(GUICard.getIcon(card));
      return GUICard.getIcon( card );
   }
}

class CardTable extends JFrame
{
   static int MAX_CARDS_PER_HAND = 57;
   static int MAX_PLAYERS = 2;  // for now, we only allow 2 person games

   private int numCardsPerHand;
   private int numPlayers;
   
   static JPanel computerHand, playingArea, yourHand;

   public CardTable(String title, int numCardsPerHand, int numPlayers)
   {
      super(title);
      this.numCardsPerHand = numCardsPerHand;
      this.numPlayers = numPlayers;
      
      // set up layout which will control placement of buttons, etc.
      FlowLayout layout = new FlowLayout(FlowLayout.CENTER, 5, 20);
      setLayout(layout);
      
      computerHand = new JPanel(new GridLayout(1, numCardsPerHand, 10, 10));
      playingArea = new JPanel(new GridLayout(2, numPlayers, 10, 10));
      yourHand = new JPanel(new GridLayout(1, numCardsPerHand, 10, 10));
      
      setLayout (new BorderLayout(20, 10));
      add(computerHand, BorderLayout.NORTH );
      add(playingArea, BorderLayout.CENTER);
      add(yourHand, BorderLayout.SOUTH);
      
      computerHand.setBorder(new TitledBorder("Computer Hand"));
      playingArea.setBorder(new TitledBorder("Playing Area"));
      yourHand.setBorder(new TitledBorder("Your Hand"));
   }

   public int getNumCardsPerHand()
   {
      return numCardsPerHand;
   }

   public int getNumPlayers()
   {
      return numPlayers;
   }
}

class GUICard
{
   private static Icon[][] iconCards = new ImageIcon[14][4]; // 14 = A thru K (+ joker optional)
   private static Icon iconBack;
   private static boolean iconsLoaded = false;
   private static String cardlValsConvertAssist = "23456789TJQKAX";
   private static String suitValsConvertAssist  = "CDHS";
   private static Card.Suit suitConvertAssist[] =
      {
            Card.Suit.clubs,
            Card.Suit.diamonds,
            Card.Suit.hearts,
            Card.Suit.spades
      };

   static void loadCardIcons()
   {
      if (!iconsLoaded)
      {
         for (int i = 0; i<cardlValsConvertAssist.length(); i++)
         {
            for (int j = 0; j<suitValsConvertAssist.length(); j++)
            {
               iconCards[i][j] = new ImageIcon(
                     "images/" + cardlValsConvertAssist.charAt(j) 
                     + suitValsConvertAssist.charAt(i) + ".gif");
            }
         }
         iconBack = new ImageIcon("images/BK.gif");
      }
   }

   static public Icon getIcon(Card card)
   {
      loadCardIcons(); // will not load twice, so no worries.
      return iconCards[valueAsInt(card)][suitAsInt(card)];
   }

   static public int valueAsInt(Card card)
   {
      System.out.println(card.getVal() + " " + card.getSuit());
      for(int i=0; i<cardlValsConvertAssist.length(); i++)
      {
         if(card.getVal() == cardlValsConvertAssist.charAt(i))
         {
            return i;
         }
      }
      return -1;
   }

   static public int suitAsInt(Card card)
   {
      for(int i=0; i<suitValsConvertAssist.length(); i++){
         if(card.getSuit() == suitConvertAssist[i])
         {
            return i;
         }
      }
      return -1;
   }

   static public Icon getCardBackIcon()
   {
      return iconBack;
   }

   // turns 0 - 13 into 'A', '2', '3', ... 'Q', 'K', 'X'
   static char turnIntIntoCardValueChar(int k)
   {

      if ( k < 0 || k > 13)
         return '?'; 
      return cardlValsConvertAssist.charAt(k);
   }

   // turns 0 - 3 into 'C', 'D', 'H', 'S'
   static Card.Suit turnIntIntoSuit(int k)
   {
      if ( k < 0 || k > 3)
         return null; 
      return suitConvertAssist[k];
   }
}

//Card class --------------------------------------------------------------------
class Card
{   
   // type and constants
   public enum Suit { clubs, diamonds, hearts, spades }

   static char DEFAULT_VAL = 'A';
   static Suit DEFAULT_SUIT = Suit.spades;

   // private data
   private char value;
   private Suit suit;
   boolean errorFlag;

   // 4 overloaded constructors
   public Card(char value, Suit suit)
   {   // because mutator sets errorFlag, we don't have to test
      set(value, suit);
   }

   public Card(char value)
   {
      this(value, Suit.spades);
   }

   public Card()
   {
      this(DEFAULT_VAL, DEFAULT_SUIT);
   }

   // copy constructor
   public Card(Card card)
   {
      this(card.value, card.suit);
   }

   // mutators
   public boolean set(char value, Suit suit)
   {
      char upVal;            // for upcasing char

      // convert to uppercase to simplify
      upVal = Character.toUpperCase(value);

      if ( !isValid(upVal, suit))
      {
         errorFlag = true;
         return false;
      }

      // else implied
      errorFlag = false;
      this.value = upVal;
      this.suit = suit;
      return true;
   }

   // accessors
   public char getVal()
   {
      return value;
   }

   public Suit getSuit()
   {
      return suit;
   }

   public boolean getErrorFlag()
   {
      return errorFlag;
   }

   // stringizer
   public String toString()
   {
      String retVal;

      if (errorFlag)
         return "** illegal **";

      // else implied
      retVal =  String.valueOf(value);
      retVal += " of ";
      retVal += String.valueOf(suit);

      return retVal;
   }

   // helper
   private static boolean isValid(char value, Suit suit)
   {
      // don't need to test suit (enum), but leave in for clarity
      char upVal;  // string to hold the 1-char value
      String legalVals = "23456789TJQKAX";

      // convert to uppercase to simplify (need #include <cctype>)
      upVal = Character.toUpperCase(value);

      // check for validity
      if ( legalVals.indexOf(upVal) >= 0 )
         return true;
      else
         return false;
   }

   public boolean equals(Card card)
   {
      if (this.value != card.value)
         return false;
      if (this.suit != card.suit)
         return false;
      if (this.errorFlag != card.errorFlag)
         return false;
      return true;
   }
}

